{"version":3,"sources":["ModalViewItem.js","Search.js","ModalItem.js","Modal.js","App.js","serviceWorker.js","index.js"],"names":["ModalViewItem","date","useState","title","setTitle","explanation","setExplanation","background","setBackground","useEffect","fetch","then","res","json","url","className","style","Search","React","value","setValue","picDate","setPicDate","hidden","setHidden","onSubmit","e","preventDefault","setTimeout","type","placeholder","onChange","target","id","onClick","ModalItem","backgroundSize","Modal","nasaList","setNasaList","modal","setModal","j","month","toString","length","console","log","i","day","choiceURL","newNasaListItem","oldNasaList","map","element","key","newModalDate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c650c840.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './ModalViewItem.css'\n\nconst ModalViewItem = ({ date }) => {\n    const [title, setTitle] = useState('')\n    const [explanation, setExplanation] = useState('')\n    const [background, setBackground] = useState('')\n\n    useEffect(() => {\n        fetch(`https://api.nasa.gov/planetary/apod?api_key=oKwdbMT2N85wHNYQKRlSpik1Ek8aSgQHfwv8IY0J&date=${date}`)\n        .then(res => res.json())\n        .then(res => {\n            setTitle(res.title)\n            setExplanation(res.explanation)\n            setBackground(res.url)\n        })\n    }, [date])\n\n    return (\n        <div className=\"modalViewItemContainer\">\n            <div className=\"modalViewItem\" style={{\n                background: `url(${background})`\n            }}>\n            </div>\n            <div>\n                <div className=\"title\">{title}</div>\n                <div>{date}</div>\n                <div className=\"explanation\">{explanation}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default ModalViewItem;","import React, { useState } from 'react'\nimport './Search.css';\nimport ModalViewItem from './ModalViewItem'\n\nconst Search = () => {\n    const [value, setValue] = React.useState('');\n    const [picDate, setPicDate] = useState('2020-02-02')\n    const [hidden, setHidden] = useState('hidden')\n\n    const handleSubmit = (e) => {\n        if (value) {\n            setPicDate(value);\n        }\n        e.preventDefault();\n        setTimeout( () => {setHidden('visible')}, 200)\n      };\n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n    };\n\n    const turnOffModal = () => {\n        setHidden('hidden')\n    }\n\n    return (\n        <>\n        <div className=\"filter\">\n            <form className=\"form\" onSubmit={handleSubmit}>\n                <input type=\"text\" className=\"input\" value={value} placeholder=\"YYYY-MM-DD\" onChange={handleChange} />\n                <button className=\"searchButton\">Search</button>\n            </form>\n            <div id={hidden} className=\"picWords\" onClick={ () => turnOffModal()}>\n                <div className=\"picWordsHolder\">\n                    <ModalViewItem date={picDate} />\n                </div>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default Search;","import React from 'react'\nimport './ModalItem.css'\n\nconst ModalItem = ({ background }) => {\n    return (\n        <div>\n            <div className=\"modalItem\" style={{\n                background: `url(${background})`,\n                backgroundSize: 'cover'\n            }}>\n            </div>\n        </div>\n    )\n}\n\nexport default ModalItem","import React, { useState, useEffect } from 'react'\nimport './Modal.css';\nimport ModalItem from './ModalItem'\nimport ModalViewItem from './ModalViewItem'\n//import ReactDOM from 'react-dom';\nimport App from './App'\n\nconst Modal = () => {\n    const [nasaList, setNasaList] = useState([])\n    const [modal, setModal] = useState('')\n    const [hidden, setHidden] = useState('hidden')\n\n    useEffect(() => {\n        for (let j = 4; j < 6; j++) {\n            let month = j.toString()\n            if (month.length === 1) {\n                month = \"0\" + month\n                console.log(month)\n            }\n            for (let i = 5; i < 10; i++) {\n                let day = i.toString()\n                if (day.length === 1) {\n                    day = \"0\" + day\n                }\n                //interpolate days and months into url\n                let choiceURL = `https://api.nasa.gov/planetary/apod?api_key=oKwdbMT2N85wHNYQKRlSpik1Ek8aSgQHfwv8IY0J&date=2020-${month}-${day}`\n                fetch(choiceURL)\n                .then(res => res.json())\n                .then(res => {\n                    let newNasaListItem = res\n                    setNasaList(oldNasaList => [...oldNasaList, newNasaListItem])\n                })\n            }\n        }\n    }, [])\n    \n    const changeModalDate = (newModalDate) => {\n        setModal(newModalDate)\n        setTimeout( () => {setHidden('visible')}, 200)\n    }\n\n    const turnOffModal = () => {\n        setHidden('hidden')\n    }\n\n    return (\n        <>\n            <div className=\"modalContainer\">\n                {nasaList.map((element, i) => {\n                    return (\n                        <div key={i} onClick={ () => changeModalDate(element.date)}>\n                            <ModalItem background={element.url} date={element.date}/>\n                        </div>\n                    )\n                })}\n            </div>\n            <div id={hidden} className=\"picWords\" onClick={ () => turnOffModal()}>\n                <div className=\"picWordsHolder\">\n                    <ModalViewItem date={modal} />\n                </div>\n            </div>\n        </>\n    )\n\n    //ReactDOM.render(<ModalViewItem date={modal} />, document.getElementById('root'))\n\n}\n\nexport default Modal;","import React from 'react';\nimport './App.css';\nimport Search from './Search'\nimport Modal from './Modal'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"intro\">NASA APOD</div>\n      <Search />\n      <Modal />\n      <div className=\"footer\">footer footer footer footer footer footer footer footer footer footer footer footer footer footer footer footer footer footer footer footer footer</div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}